{"version":3,"sources":["Logo/jumprope.svg","constants/jobs.tsx","Cluster/Cluster.component.tsx","Button/Button.component.tsx","Logo/Logo.component.tsx","Sets/Sets.component.tsx","Timer/Timer.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","longRest","name","timer","standardJob","StyledCluster","styled","div","Cluster","props","StyledButton","button","Button","children","StyledLogo","active","Logo","src","jumprope","alt","StyledUl","ul","Sets","set","map","item","index","key","length","DEFAULT_STATE","rep","engaged","StyledTimer","level","Timer","timerID","videoElement","audioElement","state","startTimer","play","setState","setInterval","tick","pauseTimer","document","pause","clearInterval","nextRep","setComplete","previousState","getNext","nextrep","this","getElementById","time","status","Fragment","onClick","disabled","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ff4c0e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/jumprope.540ae400.svg\";","export interface Job {\n\ttimer: number;\n\tname: string;\n}\n\nconst ready: Job = {\n\tname: 'Ready',\n\ttimer: 5\n};\n\nconst rest: Job = {\n\tname: 'Rest',\n\ttimer: 1\n};\nconst longRest: Job = {\n\tname: 'Long Rest',\n\ttimer: 6 + rest.timer\n};\n\nexport const standardJob: Job[] = [\n\t{ ...ready },\n\t{\n\t\tname: 'Standard',\n\t\ttimer: 3\n\t},\n\t// { ...rest },\n\t// {\n\t// \tname: 'Switch Foot',\n\t// \ttimer: 3\n\t// },\n\t// { ...rest },\n\t// {\n\t// \tname: 'High Knee',\n\t// \ttimer: 3\n\t// },\n\t// { ...rest },\n\t// {\n\t// \tname: 'Twist',\n\t// \ttimer: 3\n\t// },\n\t// { ...rest },\n\t{\n\t\tname: 'Skip Jump',\n\t\ttimer: 3\n\t},\n\t{ ...longRest }\n];\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledCluster = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex-basis: 50vh;\n\tdiv,\n\tfigure {\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tdisplay: flex;\n\t\tmargin: 0;\n\t}\n\tdiv {\n\t\tfont-size: 10rem;\n\t\tflex-basis: 40vh;\n\t}\n\tfigure {\n\t\tfont-size: 2.6rem;\n\t\tflex-basis: 10vh;\n\t}\n`;\n\nexport const Cluster = (props: { timer: number; name: string }) => (\n\t<StyledCluster>\n\t\t<div>{props.timer}</div>\n\t\t<figure>{props.name}</figure>\n\t</StyledCluster>\n);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n\tborder-radius: .6rem;\n\tfont-size: 2.2rem;\n\tpadding: 0.2rem 1rem;\n\tborder: none;\n\tbackground: var(--purple);\n\tcolor: white;\n`;\n\ntype Props = {\n\tchildren: string;\n\tonClick: () => void;\n\tdisabled?: boolean;\n};\n\nexport const Button = (props: Props) => <StyledButton {...props}>{props.children}</StyledButton>;\n","import React from 'react';\nimport styled from 'styled-components';\nimport jumprope from './jumprope.svg';\n\ntype StyledProps = {\n\tactive: boolean;\n\tchildren?: any;\n};\n\nconst StyledLogo = styled.div`\n\tdisplay: ${(props: StyledProps) => (!props.active ? 'block' : 'none')};\n\tposition: relative;\n\t> img {\n\t\tanimation: jump 1s infinite linear;\n\t\ttransform-origin: top;\n\t}\n\t> span {\n\t\tposition: absolute;\n\t\tleft: 0;\n\t\tfont-size: 1rem;\n\t\ttop: 0;\n\t\tdisplay: flex;\n\t\tflex-grow: 1;\n\t\tflex-basis: 100%;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\tjustify-content: center;\n\t}\n\t@keyframes jump {\n\t\tfrom {\n\t\t\ttransform: rotateX(0deg);\n\t\t}\n\t\tto {\n\t\t\ttransform: rotateX(360deg);\n\t\t}\n\t}\n`;\n\nconst Logo = (props: StyledProps) => (\n\t<StyledLogo active={props.active}>\n\t\t<img src={jumprope} alt=\"Logo\" />\n\t\t<span>JumpRope</span>\n\t</StyledLogo>\n);\n\nexport { Logo };\n","import React from 'react';\nimport styled from 'styled-components';\n\ntype StyledProps = {\n\tset: Array<string>;\n};\n\nconst StyledUl = styled.ul`\n\tdisplay: flex;\n\tlist-style: none;\n\tfont-size: 2rem;\n\tcolor: var(--green);\n\tposition: absolute;\n\ttop: 0;\n\tmargin: 1rem 0;\n\tpadding: 0;\n`;\n\nconst Sets = (props: StyledProps) => {\n\tconst { set } = props;\n\treturn (\n\t\t<StyledUl>\n\t\t\t{set.map((item, index) => <li key={index}>{item}</li>)}\n\t\t\t{set.length !== 0 && <li>({set.length})</li>}\n\t\t</StyledUl>\n\t);\n};\n\nexport { Sets };\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { standardJob } from '../constants/jobs';\n\nimport { Cluster } from '../Cluster/Cluster.component';\nimport { Button } from '../Button/Button.component';\nimport { Logo } from '../Logo/Logo.component';\nimport { Sets } from '../Sets/Sets.component';\n\ninterface StyledProps {\n\tlevel: string;\n}\n\ntype Props = {};\ntype State = {\n\ttimer: number;\n\trep: number;\n\tset: Array<string>;\n\tengaged: boolean;\n};\n\nconst DEFAULT_STATE = {\n\ttimer: standardJob[0].timer,\n\trep: 0,\n\tset: [],\n\tengaged: false\n};\n\nconst StyledTimer = styled.div`\n\ttext-align: center;\n\tfont-size: 10rem;\n\tcolor: var(--green);\n\ttransition: all 1s;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tflex-direction: column;\n\tsmall {\n\t\tfont-size: 1.6rem;\n\t\tdisplayl block;\n\t\tmargin: 2rem 0;\n\t}\n\t${(props: StyledProps) =>\n\t\tprops.level === 'danger' &&\n\t\t`\n    color: var(--red);\n  `};\n\t${(props: StyledProps) =>\n\t\tprops.level === 'rest' &&\n\t\t`\n    color: var(--blue);\n\t`};\n`;\n\nconst getLevel = (time: number, status: string): string => {\n\tif (status === 'Rest') return 'rest';\n\tif (time <= 2) return 'danger';\n\treturn 'success';\n};\n\nexport class Timer extends React.Component<Props, State> {\n\tprivate timerID: any;\n\tprivate videoElement: any;\n\tprivate audioElement: any;\n\tstate = DEFAULT_STATE;\n\n\tcomponentDidMount() {\n\t\tthis.videoElement = document.getElementById('NOOP_VIDEO');\n\t\tthis.audioElement = document.getElementById('BELL_RING_AUDIO');\n\t}\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.timerID);\n\t}\n\n\tstartTimer = () => {\n\t\tthis.videoElement.play();\n\t\tthis.setState({ engaged: true });\n\t\tthis.timerID = setInterval(() => this.tick(), 1000);\n\t};\n\n\tpauseTimer = () =>\n\t\tthis.setState({ engaged: false }, () => {\n\t\t\tif (document) {\n\t\t\t\tthis.videoElement.pause();\n\t\t\t}\n\t\t\tclearInterval(this.timerID);\n\t\t});\n\n\tnextRep = () => {\n\t\tthis.pauseTimer();\n\t\tif (this.state.rep !== standardJob.length - 1) {\n\t\t\tthis.setState(\n\t\t\t\t(previousState) => ({\n\t\t\t\t\ttimer: standardJob[previousState.rep + 1].timer,\n\t\t\t\t\trep: previousState.rep + 1\n\t\t\t\t}),\n\t\t\t\tthis.startTimer\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\tthis.setComplete();\n\t};\n\n\tsetComplete = () => {\n\t\tthis.setState({\n\t\t\ttimer: standardJob[0].timer,\n\t\t\trep: 0,\n\t\t\tengaged: false,\n\t\t\tset: [ ...this.state.set, '*' ]\n\t\t});\n\t};\n\n\ttick = () => {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\ttimer: this.state.timer - 1\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tif (this.state.timer === 0) {\n\t\t\t\t\tthis.audioElement.play();\n\t\t\t\t\tthis.nextRep();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t};\n\n\tgetNext = () => {\n\t\tconst nextrep = this.state.rep + 1;\n\t\tif (!standardJob[nextrep]) {\n\t\t\treturn 'Done!';\n\t\t}\n\t\treturn standardJob[nextrep].name;\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<StyledTimer level={getLevel(this.state.timer, standardJob[this.state.rep].name)}>\n\t\t\t\t<Sets set={this.state.set} />\n\t\t\t\t<Logo active={this.state.engaged} />\n\t\t\t\t{this.state.engaged ? (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<Cluster timer={this.state.timer} name={standardJob[this.state.rep].name} />\n\t\t\t\t\t\t<small>Up Next: {this.getNext()}</small>\n\t\t\t\t\t\t<Button onClick={this.pauseTimer}>Pause</Button>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t) : (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t<Button onClick={this.startTimer} disabled={this.state.engaged}>\n\t\t\t\t\t\t\tStart\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)}\n\t\t\t</StyledTimer>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport { Timer } from './Timer/Timer.component';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Timer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}